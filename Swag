Option Explicit

'==========================
' CONFIG
'==========================
Private Const SRC_WB_NAME As String = "Workplace IQ Test.xlsx"
Private Const TAB_TRADES As String = "Trading Activity"
Private Const TAB_PRICE As String = "Stock Price"

' >>> SET THESE <<<
Private Const PPT_TEMPLATE_PATH As String = "C:\Path\To\Your\Template.pptx"
Private Const OUTPUT_DIR As String = "C:\Path\To\Output\"
' This must match the think-cell element's "UpdateChart Name" set in the PPT template (Slide 26)
Private Const UPDATECHART_NAME As String = "Slide26_Combo"

'==========================
' ENTRY POINT
'==========================
Public Sub Build_Slide26_All_Tickers_ThinkCell()
    Dim srcWb As Workbook, createdWb As Boolean
    Dim tradeWS As Worksheet, priceWS As Worksheet
    Dim ppApp As PowerPoint.Application
    Dim pres As PowerPoint.Presentation
    Dim tcXlAddIn As Object                  ' think-cell in Excel (late-bound)

    ' Get the Excel think-cell add-in object
    On Error GoTo ErrThinkCell
    Set tcXlAddIn = Application.COMAddIns("thinkcell.addin").Object
    On Error GoTo 0

    ' Open source workbook if needed
    On Error Resume Next
    Set srcWb = Workbooks(SRC_WB_NAME)
    On Error GoTo 0
    If srcWb Is Nothing Then
        Set srcWb = Workbooks.Open(ThisWorkbook.Path & Application.PathSeparator & SRC_WB_NAME)
        createdWb = True
    End If

    Set tradeWS = srcWb.Worksheets(TAB_TRADES)
    Set priceWS = srcWb.Worksheets(TAB_PRICE)

    Dim tickersBoth As Collection
    Set tickersBoth = IntersectTickers(tradeWS, priceWS)
    If tickersBoth.Count = 0 Then
        MsgBox "No common tickers found in both tabs.", vbExclamation
        GoTo Cleanup
    End If

    ' PowerPoint instance
    Set ppApp = New PowerPoint.Application
    ppApp.Visible = msoFalse

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    Dim i As Long
    For i = 1 To tickersBoth.Count
        Dim tkr As String: tkr = CStr(tickersBoth(i))

        Dim priceByMonth As Scripting.Dictionary
        Dim sharesByMonth As Scripting.Dictionary
        Dim monthList As Collection
        Set priceByMonth = New Scripting.Dictionary
        Set sharesByMonth = New Scripting.Dictionary
        Set monthList = New Collection

        BuildMonthlySeries tradeWS, priceWS, tkr, priceByMonth, sharesByMonth, monthList
        If monthList.Count = 0 Then GoTo NextTicker

        ' Build a temporary staging sheet with the exact layout A3/A4 + months across row 1
        Dim rngData As Range
        Set rngData = BuildStagingRange(ThisWorkbook, monthList, priceByMonth, sharesByMonth)

        ' Open template invisibly
        Set pres = ppApp.Presentations.Open( _
                    Filename:=PPT_TEMPLATE_PATH, _
                    ReadOnly:=msoFalse, _
                    Untitled:=msoTrue, _
                    WithWindow:=msoFalse)

        ' Update the think-cell chart by name on the whole presentation
        ' bTransposed = False because series are in rows, categories (months) across columns
        tcXlAddIn.UpdateChart pres, UPDATECHART_NAME, rngData, False

        ' Optional: stamp ticker somewhere (requires a named shape or title you manage in template)
        ' For example, if Slide 26 has a text box named "Ticker_Text", you could add:
        On Error Resume Next
        pres.Slides(26).Shapes("Ticker_Text").TextFrame2.TextRange.Text = tkr
        On Error GoTo 0

        ' Save per ticker
        Dim outName As String
        outName = OUTPUT_DIR & CleanFileName(tkr & " - Automated.pptx")
        pres.SaveAs outName
        pres.Close

        ' Clear the staging range
        rngData.Worksheet.Parent.Sheets(rngData.Worksheet.Name).Delete

NextTicker:
    Next i

    MsgBox "Finished Slide 26 (think-cell) for " & tickersBoth.Count & " tickers.", vbInformation

Cleanup:
    On Error Resume Next
    If createdWb Then srcWb.Close SaveChanges:=False
    If Not ppApp Is Nothing Then ppApp.Quit
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Exit Sub

ErrThinkCell:
    MsgBox "think-cell not found or not loaded in Excel. Ensure think-cell is installed and enabled." & vbCrLf & _
           "Error: " & Err.Description, vbCritical
End Sub

'==========================
' BUILD THE STAGING RANGE
'==========================
Private Function BuildStagingRange( _
    ByVal hostWb As Workbook, _
    ByVal monthList As Collection, _
    ByVal priceByMonth As Scripting.Dictionary, _
    ByVal sharesByMonth As Scripting.Dictionary _
) As Range

    Dim ws As Worksheet
    Set ws = hostWb.Worksheets.Add(After:=hostWb.Sheets(hostWb.Sheets.Count))
    ws.Name = UniqueTempSheetName(hostWb, "tc_stage_")

    Dim n As Long, i As Long, col As Long
    n = monthList.Count

    ' Labels
    ws.Range("A3").Value = "Stock Price"
    ws.Range("A4").Value = "# trades placed"

    ' Months across row 1, starting at B1
    For i = 1 To n
        col = i + 1
        ws.Cells(1, col).Value = MonthKeyToLabel(CLng(monthList(i)))
    Next i

    ' Row 3: Prices
    For i = 1 To n
        col = i + 1
        Dim k As String: k = CStr(monthList(i))
        If priceByMonth.Exists(k) Then ws.Cells(3, col).Value = priceByMonth(k)
    Next i

    ' Row 4: Total Shares
    For i = 1 To n
        col = i + 1
        Dim k2 As String: k2 = CStr(monthList(i))
        If sharesByMonth.Exists(k2) Then ws.Cells(4, col).Value = sharesByMonth(k2)
    Next i

    ' Basic formats (optional)
    ws.Range(ws.Cells(3, 2), ws.Cells(3, n + 1)).NumberFormat = "0.00"
    ws.Range(ws.Cells(4, 2), ws.Cells(4, n + 1)).NumberFormat = "0"
    ws.Range("A1").Value = vbNullString

    ' Return the exact block think-cell expects (include row 1 headers and rows 3-4)
    ' We'll pass A1 : (n+1, 4) to cover B1.. and the two series rows.
    Set BuildStagingRange = ws.Range(ws.Cells(1, 1), ws.Cells(4, n + 1))
End Function

Private Function UniqueTempSheetName(ByVal wb As Workbook, ByVal baseName As String) As String
    Dim i As Long, nm As String
    i = 1
    Do
        nm = baseName & i
        On Error Resume Next
        wb.Worksheets(nm).Name = wb.Worksheets(nm).Name ' provoke error if exists
        If Err.Number <> 0 Then
            Err.Clear
            UniqueTempSheetName = nm
            Exit Function
        End If
        On Error GoTo 0
        i = i + 1
    Loop
End Function

'==========================
' DATA PREP
'==========================
Private Function IntersectTickers(ByVal tradeWS As Worksheet, ByVal priceWS As Worksheet) As Collection
    Dim setA As Scripting.Dictionary, setB As Scripting.Dictionary
    Set setA = UniqueTickers(tradeWS, "Ticker")
    Set setB = UniqueTickers(priceWS, "Ticker")

    Dim c As New Collection, k As Variant
    For Each k In setA.Keys
        If setB.Exists(k) Then c.Add k
    Next k
    Set IntersectTickers = c
End Function

Private Function UniqueTickers(ByVal ws As Worksheet, ByVal colName As String) As Scripting.Dictionary
    Dim lastRow As Long, colIdx As Long, r As Long
    Dim d As New Scripting.Dictionary
    colIdx = FindColumn(ws, colName)
    If colIdx = 0 Then Err.Raise vbObjectError + 1, , "Column '" & colName & "' not found in " & ws.Name

    lastRow = ws.Cells(ws.Rows.Count, colIdx).End(xlUp).Row
    For r = 2 To lastRow
        Dim v As String
        v = Trim$(CStr(ws.Cells(r, colIdx).Value))
        If Len(v) > 0 Then If Not d.Exists(v) Then d.Add v, True
    Next r
    Set UniqueTickers = d
End Function

Private Function FindColumn(ByVal ws As Worksheet, ByVal headerName As String) As Long
    Dim lastCol As Long, c As Long
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    For c = 1 To lastCol
        If StrComp(Trim$(CStr(ws.Cells(1, c).Value)), headerName, vbTextCompare) = 0 Then
            FindColumn = c
            Exit Function
        End If
    Next c
    FindColumn = 0
End Function

Private Function FirstOfMonth(ByVal d As Date) As Date
    FirstOfMonth = DateSerial(Year(d), Month(d), 1)
End Function

' priceByMonth(key "yyyymm") = last Price in month (EOM shifted to BOM)
' sharesByMonth(key "yyyymm") = sum of Total Shares in month
' monthList = sorted ascending yyyymm (Long)
Private Sub BuildMonthlySeries( _
    ByVal tradeWS As Worksheet, _
    ByVal priceWS As Worksheet, _
    ByVal tkr As String, _
    ByRef priceByMonth As Scripting.Dictionary, _
    ByRef sharesByMonth As Scripting.Dictionary, _
    ByRef monthList As Collection _
)
    Dim iTickerTrades As Long, iDateTrades As Long, iShares As Long
    Dim iTickerPrice As Long, iDatePrice As Long, iPrice As Long

    iTickerTrades = FindColumn(tradeWS, "Ticker")
    iDateTrades = FindColumn(tradeWS, "TRADE_EXEC_DT")
    iShares = FindColumn(tradeWS, "Total Shares")

    iTickerPrice = FindColumn(priceWS, "Ticker")
    iDatePrice = FindColumn(priceWS, "Date")
    iPrice = FindColumn(priceWS, "Price")

    If iTickerTrades * iDateTrades * iShares * iTickerPrice * iDatePrice * iPrice = 0 Then
        Err.Raise vbObjectError + 2, , "One or more required columns are missing."
    End If

    Dim lastRow As Long, r As Long
    Dim monthKey As Long, key As String

    ' Trades: sum per month (dates already BOM per your spec, normalize anyway)
    lastRow = tradeWS.Cells(tradeWS.Rows.Count, iTickerTrades).End(xlUp).Row
    For r = 2 To lastRow
        If StrComp(CStr(tradeWS.Cells(r, iTickerTrades).Value), tkr, vbTextCompare) = 0 Then
            If IsDate(tradeWS.Cells(r, iDateTrades).Value) Then
                Dim dT As Date: dT = FirstOfMonth(CDate(tradeWS.Cells(r, iDateTrades).Value))
                monthKey = CLng(Year(dT) * 100 + Month(dT))
                key = CStr(monthKey)
                Dim sh As Double: sh = NzD(tradeWS.Cells(r, iShares).Value)
                If sharesByMonth.Exists(key) Then
                    sharesByMonth(key) = sharesByMonth(key) + sh
                Else
                    sharesByMonth.Add key, sh
                End If
            End If
        End If
    Next r

    ' Price: take last value seen per month (EOM shifted to BOM)
    lastRow = priceWS.Cells(priceWS.Rows.Count, iTickerPrice).End(xlUp).Row
    For r = 2 To lastRow
        If StrComp(CStr(priceWS.Cells(r, iTickerPrice).Value), tkr, vbTextCompare) = 0 Then
            If IsDate(priceWS.Cells(r, iDatePrice).Value) Then
                Dim dP As Date: dP = FirstOfMonth(CDate(priceWS.Cells(r, iDatePrice).Value))
                monthKey = CLng(Year(dP) * 100 + Month(dP))
                key = CStr(monthKey)
                priceByMonth(key) = NzD(priceWS.Cells(r, iPrice).Value)
            End If
        End If
    Next r

    ' Union & sort months
    Dim dTmp As New Scripting.Dictionary, k As Variant
    For Each k In sharesByMonth.Keys: dTmp(k) = True: Next k
    For Each k In priceByMonth.Keys: If Not dTmp.Exists(k) Then dTmp.Add k, True
    Next k
    If dTmp.Count = 0 Then Exit Sub

    Dim arr() As Long, idx As Long
    ReDim arr(1 To dTmp.Count)
    idx = 1
    For Each k In dTmp.Keys
        arr(idx) = CLng(k): idx = idx + 1
    Next k
    QuickSortLong arr, LBound(arr), UBound(arr)

    Dim i As Long
    For i = LBound(arr) To UBound(arr)
        monthList.Add arr(i)
    Next i
End Sub

Private Function NzD(ByVal v As Variant, Optional ByVal def As Double = 0#) As Double
    If IsError(v) Then
        NzD = def
    ElseIf IsNumeric(v) Then
        NzD = CDbl(v)
    Else
        NzD = def
    End If
End Function

'==========================
' UTIL
'==========================
Private Sub QuickSortLong(ByRef arr() As Long, ByVal lo As Long, ByVal hi As Long)
    Dim i As Long, j As Long, pivot As Long, tmp As Long
    i = lo: j = hi
    pivot = arr((lo + hi) \ 2)
    Do While i <= j
        Do While arr(i) < pivot: i = i + 1: Loop
        Do While arr(j) > pivot: j = j - 1: Loop
        If i <= j Then
            tmp = arr(i): arr(i) = arr(j): arr(j) = tmp
            i = i + 1: j = j - 1
        End If
    Loop
    If lo < j Then QuickSortLong arr, lo, j
    If i < hi Then QuickSortLong arr, i, hi
End Sub

Private Function MonthKeyToLabel(ByVal yyyymm As Long) As String
    Dim y As Integer, m As Integer
    y = CInt(yyyymm \ 100)
    m = CInt(yyyymm Mod 100)
    MonthKeyToLabel = Format(DateSerial(y, m, 1), "MMM YYYY")
End Function

Private Function CleanFileName(ByVal s As String) As String
    Dim bad As Variant, i As Long
    bad = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    For i = LBound(bad) To UBound(bad)
        s = Replace$(s, bad(i), "_")
    Next i
    CleanFileName = s
End Function
