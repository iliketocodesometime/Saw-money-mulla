# Ensure dt2_report is a datetime column
input_df['dt2_report'] = pd.to_datetime(input_df['dt2_report'])

# Identify the most recent year in the dataset
most_recent_year = input_df['dt2_report'].dt.year.max()

# Find the max business day for each month in the previous year
previous_year_max_bd = input_df[input_df['dt2_report'].dt.year == most_recent_year - 1].groupby(input_df['dt2_report'].dt.month)['business_day'].max()

# Initialize the adjusted business day column for the entire DataFrame
input_df['adjusted_business_day'] = None

# Adjust business days for the most recent year
for month in range(1, 13):  # Loop through each month
    month_df = input_df[(input_df['dt2_report'].dt.year == most_recent_year) & (input_df['dt2_report'].dt.month == month)]
    if not month_df.empty:
        # Start business day counting for the most recent year
        if month == 1:
            current_bd = 0
        else:
            # For subsequent months, start from the max of the previous month if exists
            current_bd = previous_year_max_bd.get(month - 1, current_bd)
        
        for index, row in month_df.iterrows():
            current_bd += 1
            # Adjust for month-end
            if row['dt2_report'] == month_df['dt2_report'].max():
                current_bd = max(current_bd, previous_year_max_bd.get(month, current_bd))
            input_df.at[index, 'adjusted_business_day'] = current_bd

# Now filter out the rows for the most recent year to see the adjustments
adjusted_recent_year_df = input_df[input_df['dt2_report'].dt.year == most_recent_year]
