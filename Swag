# Assuming input_df is your DataFrame and it has 'dt2_report' and 'business_day' columns
# Assuming get_max_bd_previous_year is a function that returns the maximum business day of a given month from the previous year

# Filter for the most recent year
most_recent_year = input_df['dt2_report'].dt.year.max()
recent_year_df = input_df[input_df['dt2_report'].dt.year == most_recent_year].copy()

# Sort by date to ensure the data is in the correct order
recent_year_df.sort_values('dt2_report', inplace=True)

# Initialize the adjusted business day column
recent_year_df['adjusted_business_day'] = 0

# Variable to keep track of the current adjusted business day count
current_adj_bd = 0

# Iterate through the DataFrame
for month in range(1, 13):
    month_data = recent_year_df[recent_year_df['dt2_report'].dt.month == month]
    if month_data.empty:
        continue  # Skip if no data for the month

    # Determine the max business day from the previous year for the current month
    max_bd_previous_year = get_max_bd_previous_year(month_data.iloc[-1], input_df)

    for idx, row in month_data.iterrows():
        # Increment the adjusted business day normally
        current_adj_bd += 1

        # If we are in the last few days and exceed the max business day from the previous year, adjust accordingly
        if row['business_day'] > max_bd_previous_year:
            recent_year_df.at[idx, 'adjusted_business_day'] = max_bd_previous_year
        else:
            recent_year_df.at[idx, 'adjusted_business_day'] = current_adj_bd

    # Adjust the starting business day for the next month
    if row['business_day'] == max_bd_previous_year:
        current_adj_bd = max_bd_previous_year

# Merge the adjusted business days back to the input DataFrame
input_df = input_df.merge(recent_year_df[['dt2_report', 'adjusted_business_day']],
                          on='dt2_report',
                          how='left')

# Display the adjusted DataFrame to verify the results
print(input_df[input_df['dt2_report'].dt.year == most_recent_year])
