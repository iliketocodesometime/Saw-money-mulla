Option Explicit

'==========================
' CONFIGURATION
'==========================
Private Const SRC_WB_NAME As String = "Workplace IQ Test.xlsx"
Private Const TAB_TRADES As String = "Trading Activity"
Private Const TAB_PRICE As String = "Stock Price"

' >>> SET THESE <<<
Private Const PPT_TEMPLATE_PATH As String = "C:\Path\To\Your\Template.pptx"
Private Const OUTPUT_DIR As String = "C:\Path\To\Output\"
' think-cell chart’s “UpdateChart Name” on Slide 26
Private Const UPDATECHART_NAME As String = "Chart26"
' Text box on Slide 26 to receive the dynamic correlation caption
Private Const CAPTION_SHAPE_NAME As String = "Correlation_Caption"

' Soft recycle every N tickers to keep PowerPoint/think-cell stable on long runs
Private Const SOFT_RECYCLE_EVERY As Long = 60
' Retry counts for UpdateChart / SaveCopyAs if COM gets busy
Private Const MAX_RETRIES As Long = 3

'==========================
' MAIN ENTRY POINT
'==========================
Public Sub Build_Slide26_All_Tickers_ThinkCell()
    Dim srcWb As Workbook, createdWb As Boolean
    Dim tradeWS As Worksheet, priceWS As Worksheet
    Dim ppApp As PowerPoint.Application
    Dim pres As PowerPoint.Presentation
    Dim tcXlAddIn As Object

    '--- Get think-cell add-in object in Excel ---
    On Error GoTo ErrThinkCell
    Set tcXlAddIn = Application.COMAddIns("thinkcell.addin").Object
    On Error GoTo 0

    '--- Open source workbook if needed ---
    On Error Resume Next
    Set srcWb = Workbooks(SRC_WB_NAME)
    On Error GoTo 0
    If srcWb Is Nothing Then
        Set srcWb = Workbooks.Open(ThisWorkbook.Path & "\" & SRC_WB_NAME)
        createdWb = True
    End If

    Set tradeWS = srcWb.Worksheets(TAB_TRADES)
    Set priceWS = srcWb.Worksheets(TAB_PRICE)

    Dim tickersBoth As Collection
    Set tickersBoth = IntersectTickers(tradeWS, priceWS)
    If tickersBoth.Count = 0 Then
        MsgBox "No common tickers found in both tabs.", vbExclamation
        GoTo Cleanup
    End If

    '--- PowerPoint must be visible for think-cell ---
    Set ppApp = New PowerPoint.Application
    ppApp.Visible = msoTrue

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Suppress alerts during run (restored at end)
    Dim alertsPrev As Boolean
    alertsPrev = Application.DisplayAlerts
    Application.DisplayAlerts = False

    '--- Open the template ONCE and reuse it ---
    Set pres = ppApp.Presentations.Open( _
                Filename:=PPT_TEMPLATE_PATH, _
                ReadOnly:=msoFalse, _
                Untitled:=msoTrue, _
                WithWindow:=msoTrue)

    Dim i As Long, nSinceRecycle As Long, tryCt As Long
    nSinceRecycle = 0

    For i = 1 To tickersBoth.Count
        Dim tkr As String: tkr = CStr(tickersBoth(i))
        Debug.Print "Processing " & tkr

        Dim priceByMonth As Scripting.Dictionary
        Dim sharesByMonth As Scripting.Dictionary
        Dim monthList As Collection
        Set priceByMonth = New Scripting.Dictionary
        Set sharesByMonth = New Scripting.Dictionary
        Set monthList = New Collection

        BuildMonthlySeries tradeWS, priceWS, tkr, priceByMonth, sharesByMonth, monthList
        If monthList.Count = 0 Then GoTo NextTicker

        '--- Build temp Excel range for think-cell layout ---
        Dim rngData As Range
        Set rngData = BuildStagingRange(ThisWorkbook, monthList, priceByMonth, sharesByMonth)

        '--- Update the think-cell chart by UpdateChart Name (with retries) ---
RetryUpdate:
        On Error Resume Next
        Err.Clear
        tcXlAddIn.UpdateChart pres, UPDATECHART_NAME, rngData, False
        If Err.Number <> 0 Then
            tryCt = tryCt + 1
            Debug.Print "UpdateChart retry " & tryCt & " for " & tkr & " -> " & Err.Description
            DoEvents: Application.Wait (Now + TimeValue("0:00:02"))
            If tryCt < MAX_RETRIES Then GoTo RetryUpdate
        End If
        On Error GoTo 0
        tryCt = 0

        ' Optional: stamp ticker on slide 26 (if you have a text box named "Ticker_Text")
        On Error Resume Next
        pres.Slides(26).Shapes("Ticker_Text").TextFrame2.TextRange.Text = tkr
        On Error GoTo 0

        ' --- Dynamic correlation caption ---
        Dim arrP() As Double, arrS() As Double, nOverlap As Long, rVal As Double, cap As String
        BuildOverlapArrays monthList, priceByMonth, sharesByMonth, arrP, arrS, nOverlap
        If TryPearsonR(arrP, arrS, nOverlap, rVal) Then
            cap = MakeCorrelationCaption(tkr, nOverlap, rVal)
        Else
            cap = "Correlation analysis: not enough variation or overlapping months to assess a relationship."
        End If
        On Error Resume Next
        pres.Slides(26).Shapes(CAPTION_SHAPE_NAME).TextFrame2.TextRange.Text = cap
        On Error GoTo 0

        ' Let think-cell finish drawing before saving
        DoEvents
        Application.Wait (Now + TimeValue("0:00:02"))

        '--- Save a COPY (don’t close template) with retries ---
RetrySave:
        On Error Resume Next
        Err.Clear
        Dim outName As String
        outName = OUTPUT_DIR & CleanFileName(tkr & " - Automated.pptx")
        pres.SaveCopyAs outName
        If Err.Number <> 0 Then
            tryCt = tryCt + 1
            Debug.Print "SaveCopyAs retry " & tryCt & " for " & tkr & " -> " & Err.Description
            DoEvents: Application.Wait (Now + TimeValue("0:00:02"))
            If tryCt < MAX_RETRIES Then GoTo RetrySave
        End If
        On Error GoTo 0
        tryCt = 0

        '--- Clean up staging sheet silently (no prompts) ---
        On Error Resume Next
        rngData.Worksheet.Delete
        On Error GoTo 0
        Set rngData = Nothing

        nSinceRecycle = nSinceRecycle + 1

        ' --- SOFT RECYCLE every N tickers to avoid long-run stalls ---
        If nSinceRecycle >= SOFT_RECYCLE_EVERY Then
            DoEvents
            Application.Wait (Now + TimeValue("0:00:02"))

            On Error Resume Next
            pres.Close            ' close the current instance
            On Error GoTo 0

            Set pres = ppApp.Presentations.Open( _
                        Filename:=PPT_TEMPLATE_PATH, _
                        ReadOnly:=msoFalse, _
                        Untitled:=msoTrue, _
                        WithWindow:=msoTrue)

            nSinceRecycle = 0
        End If

NextTicker:
    Next i

    ' Final close after loop
    On Error Resume Next
    pres.Close
    On Error GoTo 0

    ' Restore alerts
    Application.DisplayAlerts = alertsPrev

    MsgBox "Finished Slide 26 automation for " & tickersBoth.Count & " tickers.", vbInformation

Cleanup:
    On Error Resume Next
    If createdWb Then srcWb.Close SaveChanges:=False
    If Not ppApp Is Nothing Then ppApp.Quit
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.DisplayAlerts = alertsPrev
    Exit Sub

ErrThinkCell:
    MsgBox "think-cell not found or not loaded in Excel. Ensure think-cell is installed and enabled." _
        & vbCrLf & "Error: " & Err.Description, vbCritical
End Sub

'==========================
' BUILD STAGING RANGE (for UpdateChart)
'==========================
Private Function BuildStagingRange( _
    ByVal hostWb As Workbook, _
    ByVal monthList As Collection, _
    ByVal priceByMonth As Scripting.Dictionary, _
    ByVal sharesByMonth As Scripting.Dictionary _
) As Range

    Dim ws As Worksheet
    Dim tempName As String
    tempName = UniqueTempSheetName(hostWb, "tc_stage_")
    Set ws = hostWb.Worksheets.Add(After:=hostWb.Sheets(hostWb.Sheets.Count))
    ws.Name = tempName

    Dim n As Long, i As Long, col As Long
    n = monthList.Count

    ws.Range("A3").Value = "Stock Price"
    ws.Range("A4").Value = "# trades placed"

    ' Months across row 1 (B1..)
    For i = 1 To n
        col = i + 1
        ws.Cells(1, col).Value = MonthKeyToLabel(CLng(monthList(i)))
    Next i

    ' Row 3: prices
    For i = 1 To n
        col = i + 1
        Dim k As String: k = CStr(monthList(i))
        If priceByMonth.Exists(k) Then ws.Cells(3, col).Value = priceByMonth(k)
    Next i

    ' Row 4: shares
    For i = 1 To n
        col = i + 1
        Dim k2 As String: k2 = CStr(monthList(i))
        If sharesByMonth.Exists(k2) Then ws.Cells(4, col).Value = sharesByMonth(k2)
    Next i

    ws.Range(ws.Cells(3, 2), ws.Cells(3, n + 1)).NumberFormat = "0.00"
    ws.Range(ws.Cells(4, 2), ws.Cells(4, n + 1)).NumberFormat = "0"

    Set BuildStagingRange = ws.Range(ws.Cells(1, 1), ws.Cells(4, n + 1))
End Function

Private Function UniqueTempSheetName(ByVal wb As Workbook, ByVal baseName As String) As String
    Dim i As Long, nm As String
    For i = 1 To 1000
        nm = baseName & i
        If Not SheetExists(wb, nm) Then
            UniqueTempSheetName = nm
            Exit Function
        End If
    Next i
    UniqueTempSheetName = baseName & Format(Now, "hhmmss")
End Function

Private Function SheetExists(ByVal wb As Workbook, ByVal name As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Worksheets(name)
    SheetExists = Not ws Is Nothing
    Set ws = Nothing
    On Error GoTo 0
End Function

'==========================
' DATA PREPARATION
'==========================
Private Function IntersectTickers(ByVal tradeWS As Worksheet, ByVal priceWS As Worksheet) As Collection
    Dim setA As Scripting.Dictionary, setB As Scripting.Dictionary
    Set setA = UniqueTickers(tradeWS, "Ticker")
    Set setB = UniqueTickers(priceWS, "Ticker")
    Dim c As New Collection, k As Variant
    For Each k In setA.Keys
        If setB.Exists(k) Then c.Add k
    Next k
    Set IntersectTickers = c
End Function

Private Function UniqueTickers(ByVal ws As Worksheet, ByVal colName As String) As Scripting.Dictionary
    Dim lastRow As Long, colIdx As Long, r As Long
    Dim d As New Scripting.Dictionary
    colIdx = FindColumn(ws, colName)
    If colIdx = 0 Then Err.Raise vbObjectError + 1, , "Column '" & colName & "' not found in " & ws.Name
    lastRow = ws.Cells(ws.Rows.Count, colIdx).End(xlUp).Row
    For r = 2 To lastRow
        Dim v As String
        v = Trim$(CStr(ws.Cells(r, colIdx).Value))
        If Len(v) > 0 Then If Not d.Exists(v) Then d.Add v, True
    Next r
    Set UniqueTickers = d
End Function

Private Function FindColumn(ByVal ws As Worksheet, ByVal headerName As String) As Long
    Dim lastCol As Long, c As Long
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    For c = 1 To lastCol
        If StrComp(Trim$(CStr(ws.Cells(1, c).Value)), headerName, vbTextCompare) = 0 Then
            FindColumn = c
            Exit Function
        End If
    Next c
    FindColumn = 0
End Function

Private Function FirstOfMonth(ByVal d As Date) As Date
    FirstOfMonth = DateSerial(Year(d), Month(d), 1)
End Function

Private Sub BuildMonthlySeries( _
    ByVal tradeWS As Worksheet, _
    ByVal priceWS As Worksheet, _
    ByVal tkr As String, _
    ByRef priceByMonth As Scripting.Dictionary, _
    ByRef sharesByMonth As Scripting.Dictionary, _
    ByRef monthList As Collection _
)
    Dim iTickerTrades As Long, iDateTrades As Long, iShares As Long
    Dim iTickerPrice As Long, iDatePrice As Long, iPrice As Long

    iTickerTrades = FindColumn(tradeWS, "Ticker")
    iDateTrades = FindColumn(tradeWS, "TRADE_EXEC_DT")
    iShares = FindColumn(tradeWS, "Total Shares")
    iTickerPrice = FindColumn(priceWS, "Ticker")
    iDatePrice = FindColumn(priceWS, "Date")
    iPrice = FindColumn(priceWS, "Price")

    Dim lastRow As Long, r As Long, key As String, monthKey As Long

    ' Trades: sum per month (normalize to BOM)
    lastRow = tradeWS.Cells(tradeWS.Rows.Count, iTickerTrades).End(xlUp).Row
    For r = 2 To lastRow
        If StrComp(CStr(tradeWS.Cells(r, iTickerTrades).Value), tkr, vbTextCompare) = 0 Then
            If IsDate(tradeWS.Cells(r, iDateTrades).Value) Then
                Dim dT As Date: dT = FirstOfMonth(CDate(tradeWS.Cells(r, iDateTrades).Value))
                monthKey = CLng(Year(dT) * 100 + Month(dT))
                key = CStr(monthKey)
                Dim sh As Double: sh = NzD(tradeWS.Cells(r, iShares).Value)
                If sharesByMonth.Exists(key) Then
                    sharesByMonth(key) = sharesByMonth(key) + sh
                Else
                    sharesByMonth.Add key, sh
                End If
            End If
        End If
    Next r

    ' Prices: last seen per month (EOM shifted to BOM)
    lastRow = priceWS.Cells(priceWS.Rows.Count, iTickerPrice).End(xlUp).Row
    For r = 2 To lastRow
        If StrComp(CStr(priceWS.Cells(r, iTickerPrice).Value), tkr, vbTextCompare) = 0 Then
            If IsDate(priceWS.Cells(r, iDatePrice).Value) Then
                Dim dP As Date: dP = FirstOfMonth(CDate(priceWS.Cells(r, iDatePrice).Value))
                monthKey = CLng(Year(dP) * 100 + Month(dP))
                key = CStr(monthKey)
                priceByMonth(key) = NzD(priceWS.Cells(r, iPrice).Value)
            End If
        End If
    Next r

    ' Merge + sort
    Dim dTmp As New Scripting.Dictionary, k As Variant
    For Each k In sharesByMonth.Keys: dTmp(k) = True: Next k
    For Each k In priceByMonth.Keys: If Not dTmp.Exists(k) Then dTmp.Add k, True
    Next k

    Dim arr() As Long, idx As Long
    ReDim arr(1 To dTmp.Count)
    idx = 1
    For Each k In dTmp.Keys
        arr(idx) = CLng(k): idx = idx + 1
    Next k
    QuickSortLong arr, LBound(arr), UBound(arr)

    Dim i As Long
    For i = LBound(arr) To UBound(arr)
        monthList.Add arr(i)
    Next i
End Sub

'==========================
' UTILITIES
'==========================
Private Function NzD(ByVal v As Variant, Optional ByVal def As Double = 0#) As Double
    If IsError(v) Then
        NzD = def
    ElseIf IsNull(v) Or IsEmpty(v) Then
        NzD = def
    ElseIf VarType(v) = vbString And Trim$(CStr(v)) = "" Then
        NzD = def
    ElseIf IsNumeric(v) Then
        NzD = CDbl(v)
    Else
        NzD = def
    End If
End Function

Private Sub QuickSortLong(ByRef arr() As Long, ByVal lo As Long, ByVal hi As Long)
    Dim i As Long, j As Long, pivot As Long, tmp As Long
    i = lo: j = hi
    pivot = arr((lo + hi) \ 2)
    Do While i <= j
        Do While arr(i) < pivot: i = i + 1: Loop
        Do While arr(j) > pivot: j = j - 1: Loop
        If i <= j Then
            tmp = arr(i): arr(i) = arr(j): arr(j) = tmp
            i = i + 1: j = j - 1
        End If
    Loop
    If lo < j Then QuickSortLong arr, lo, j
    If i < hi Then QuickSortLong arr, i, hi
End Sub

Private Function MonthKeyToLabel(ByVal yyyymm As Long) As String
    Dim y As Integer, m As Integer
    y = CInt(yyyymm \ 100)
    m = CInt(yyyymm Mod 100)
    MonthKeyToLabel = Format(DateSerial(y, m, 1), "MMM YYYY")
End Function

Private Function CleanFileName(ByVal s As String) As String
    Dim bad As Variant, i As Long
    bad = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    For i = LBound(bad) To UBound(bad)
        s = Replace$(s, bad(i), "_")
    Next i
    CleanFileName = s
End Function

'==========================
' CORRELATION HELPERS
'==========================
' Build aligned arrays (same months, both values present)
Private Sub BuildOverlapArrays( _
    ByVal monthList As Collection, _
    ByVal priceByMonth As Scripting.Dictionary, _
    ByVal sharesByMonth As Scripting.Dictionary, _
    ByRef x() As Double, _
    ByRef y() As Double, _
    ByRef n As Long _
)
    Dim i As Long
    Dim key As String
    Dim tmpX() As Double, tmpY() As Double
    ReDim tmpX(1 To monthList.Count)
    ReDim tmpY(1 To monthList.Count)
    
    n = 0
    For i = 1 To monthList.Count
        key = CStr(monthList(i))
        If priceByMonth.Exists(key) And sharesByMonth.Exists(key) Then
            If IsNumeric(priceByMonth(key)) And IsNumeric(sharesByMonth(key)) Then
                If Not IsEmpty(priceByMonth(key)) And Not IsEmpty(sharesByMonth(key)) Then
                    n = n + 1
                    tmpX(n) = CDbl(priceByMonth(key))   ' Stock Price
                    tmpY(n) = CDbl(sharesByMonth(key)) ' Trading Activity (Total Shares)
                End If
            End If
        End If
    Next i
    
    If n >= 1 Then
        ReDim x(1 To n)
        ReDim y(1 To n)
        For i = 1 To n
            x(i) = tmpX(i)
            y(i) = tmpY(i)
        Next i
    Else
        ReDim x(1 To 1)
        ReDim y(1 To 1)
    End If
End Sub

' Compute Pearson correlation r
Private Function TryPearsonR( _
    ByRef x() As Double, _
    ByRef y() As Double, _
    ByVal n As Long, _
    ByRef r As Double _
) As Boolean
    Dim i As Long
    Dim sumX As Double, sumY As Double, sumX2 As Double, sumY2 As Double, sumXY As Double
    If n < 3 Then
        TryPearsonR = False
        Exit Function
    End If
    For i = 1 To n
        sumX = sumX + x(i)
        sumY = sumY + y(i)
        sumX2 = sumX2 + x(i) * x(i)
        sumY2 = sumY2 + y(i) * y(i)
        sumXY = sumXY + x(i) * y(i)
    Next i
    Dim denom As Double
    denom = Sqr((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY))
    If denom = 0 Then
        TryPearsonR = False
        Exit Function
    End If
    r = (n * sumXY - sumX * sumY) / denom
    TryPearsonR = True
End Function

' Turn r and sample size into a caption
Private Function MakeCorrelationCaption( _
    ByVal tkr As String, _
    ByVal n As Long, _
    ByVal r As Double _
) As String
    Dim absr As Double: absr = Abs(r)
    Dim strength As String, direction As String
    
    If n < 3 Then
        MakeCorrelationCaption = "Correlation analysis: not enough overlapping months to assess a relationship."
        Exit Function
    End If
    
    If r >= 0 Then
        direction = "positive"
    Else
        direction = "negative"
    End If
    
    ' Strength bins
    If absr >= 0.7 Then
        strength = "strong"
    ElseIf absr >= 0.4 Then
        strength = "moderate"
    ElseIf absr >= 0.2 Then
        strength = "weak"
    Else
        MakeCorrelationCaption = "Correlation analysis (" & n & " months): little to no relationship between stock price and trading activity (r=" & Format(r, "+0.00;-0.00;0.00") & ")."
        Exit Function
    End If
    
    MakeCorrelationCaption = "Correlation analysis (" & n & " months): " & strength & " " & direction & " relationship between stock price and trading activity (r=" & Format(r, "+0.00;-0.00;0.00") & ")."
End Function

